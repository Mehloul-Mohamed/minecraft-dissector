name: CI

on:
  push:
    branches:
      - '*'
    tags:
      - v*
  pull_request:
    branches:
      - master

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: sudo add-apt-repository -y ppa:wireshark-dev/stable
      - run: sudo apt-get update && sudo apt-get install -y make gcc pkg-config wireshark-dev
      - uses: actions/setup-node@v4
        with:
          node-version: 14
      - run: make packet-minecraft.so
      - uses: actions/upload-artifact@v4
        with:
          name: linux
          path: packet-minecraft.so

  build-windows:
    runs-on: windows-latest
    env:
      PLATFORM: x64
      WIRESHARK_LIB_DIR: C:/wireshark-win64-libs-3.4
      GLIB_INCLUDE: vcpkg-export-20190318-win64ws/installed/x64-windows/include
    steps:
      - name: Checkout Wireshark
        uses: actions/checkout@v4
        with:
          repository: wireshark/wireshark
          ref: wireshark-3.4.2
          path: wireshark
      - name: Choco install Wireshark Deps
        run: choco install -y --no-progress cmake winflexbison3 strawberryperl asciidoctorj xsltproc docbook-bundle
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: 16.4
      - run: mkdir build
        working-directory: wireshark
      - run: cmake -A x64 .. -DBUILD_wireshark=OFF
        working-directory: wireshark/build
      - run: cmake --build . --config RelWithDebInfo --target epan
        working-directory: wireshark/build

      - uses: actions/checkout@v4
        with:
          path: dissector
          submodules: true
      - run: choco install -y --no-progress make mingw
      - uses: actions/setup-node@v4
        with:
          node-version: 14
      - run: make packet-minecraft.dll
        env:
          CPPFLAGS: -I../wireshark/build -I../wireshark -I${{ env.WIRESHARK_LIB_DIR }}/${{ env.GLIB_INCLUDE }} -D_SSIZE_T_DEFINED
          LDLIBS: ../wireshark/build/run/RelWithDebInfo/wireshark.lib
          CC: gcc
        working-directory: dissector
      - uses: actions/upload-artifact@v4
        with:
          name: windows
          path: dissector/packet-minecraft.dll

  publish:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux
          path: ./
      - name: Download windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows
          path: ./
      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          files: |
            packet-minecraft.so
            packet-minecraft.dll
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
